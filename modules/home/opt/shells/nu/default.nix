{ config, lib, pkgs, ... }:

{
  config = lib.mkIf (config.default.shell == "nu") {
    programs.nushell = {
      enable = true;

      configFile.text =  ''
        alias ll = ls -l
        alias ns = nix-shell -p
        alias gcl = git clone
        alias r = ranger


        let fish_completer = {|spans|
            fish --command $'complete "--do-complete=($spans | str join " ")"'
            | $"value(char tab)description(char newline)" + $in
            | from tsv --flexible --no-infer
        }

        let carapace_completer = {|spans|
          carapace $spans.0 nushell ...$spans | from json
        }

        let zoxide_completer = {|spans|
            $spans | skip 1 | zoxide query -l ...$in | lines | where {|x| $x != $env.PWD}
        }

        # This completer will use carapace by default
        let external_completer = {|spans|
            let expanded_alias = scope aliases
            | where name == $spans.0
            | get -i 0.expansion

            let spans = if $expanded_alias != null {
                $spans
                | skip 1
                | prepend ($expanded_alias | split row ' ' | take 1)
            } else {
                $spans
            }

            match $spans.0 {
                # carapace completions are incorrect for nu
                nu => $fish_completer
                # fish completes commits and branch names in a nicer way
                git => $fish_completer
                # carapace doesn't have completions for asdf
                asdf => $fish_completer
                # use zoxide completions for zoxide commands
                __zoxide_z | __zoxide_zi => $zoxide_completer
                _ => $carapace_completer
            } | do $in $spans
        }


        $env.config = {
          show_banner: false, 
          completions: {
            external: {
              enable: true
              completer: $external_completer
            }
          }
        }

        # Code generated by zoxide. DO NOT EDIT.

        # =============================================================================
        #
        # Hook configuration for zoxide.
        #

        # Initialize hook to add new entries to the database.
        if (not ($env | default false __zoxide_hooked | get __zoxide_hooked)) {
          $env.__zoxide_hooked = true
          $env.config = ($env | default {} config).config
          $env.config = ($env.config | default {} hooks)
          $env.config = ($env.config | update hooks ($env.config.hooks | default {} env_change))
          $env.config = ($env.config | update hooks.env_change ($env.config.hooks.env_change | default [] PWD))
          $env.config = ($env.config | update hooks.env_change.PWD ($env.config.hooks.env_change.PWD | append {|_, dir|
            zoxide add -- $dir
          }))
        }

        # =============================================================================
        #
        # When using zoxide with --no-cmd, alias these internal functions as desired.
        #

        # Jump to a directory using only keywords.
        def --env __zoxide_z [...rest:string] {
          let arg0 = ($rest | append '~').0
          let path = if (($rest | length) <= 1) and ($arg0 == '-' or ($arg0 | path expand | path type) == dir) {
            $arg0
          } else {
            (zoxide query --exclude $env.PWD -- ...$rest | str trim -r -c "\n")
          }
          cd $path
        }

        # Jump to a directory using interactive search.
        def --env __zoxide_zi [...rest:string] {
          cd $'(zoxide query --interactive -- ...$rest | str trim -r -c "\n")'
        }

        # =============================================================================
        #
        # Commands for zoxide. Disable these using --no-cmd.
        #

        alias z = __zoxide_z
        alias zi = __zoxide_zi

        # =============================================================================
        #
        # Add this to your env file (find it by running `$nu.env-path` in Nushell):
        #
        #   zoxide init nushell | save -f ~/.zoxide.nu
        #
        # Now, add this to the end of your config file (find it by running
        # `$nu.config-path` in Nushell):
        #
        #   source ~/.zoxide.nu
        #
        # Note: zoxide only supports Nushell v0.89.0+.
      '';
    };
  };
}